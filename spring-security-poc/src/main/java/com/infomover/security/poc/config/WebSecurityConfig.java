package com.infomover.security.poc.config;

import javax.sql.DataSource;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.web.authentication.rememberme.JdbcTokenRepositoryImpl;
import org.springframework.security.web.authentication.rememberme.PersistentTokenRepository;
import org.springframework.security.web.authentication.www.BasicAuthenticationEntryPoint;
import org.springframework.security.web.util.matcher.AntPathRequestMatcher;


/**
 * 1) Creates the Spring Security Filter Chain --> {@link EnableWebSecurity.WebSecurityConfiguration#springSecurityFilterChain()}<br>
 * 2) Key Filters in security filterchain: <br>SecurityContextPersistenceFilter (restores Authentication from JSESSIONID)
	 <br>UsernamePasswordAuthenticationFilter (performs authentication) & BasicAuthenticationFilter
	 <br>ExceptionTranslationFilter (catch security exceptions from FilterSecurityInterceptor)
	 <br>FilterSecurityInterceptor (may throw authentication and authorization exceptions)<br>
 * 3) The AuthenticationManager, ProviderManager and AuthenticationProvider --> 
 * 		Spring security uses AuthenticationManager interface for authenticating request and providerManager is the default implementer of the same which interns uses Multiple AuthenticationProvider<br>
 * 4) DaoAuthenticationProvider is responsible for authenticating request which interns uses userDetailsService.loadUserByUsername(String username) to load currrent user.<br>
 * 5) Now, whenever there is a login request a UsernamePasswordAuthenticationToken is generated by Spring and this token is validated in authenticate method.<br>
 * 6) After success full authentication the principal object from database(which also contains the authorities) is loaded to UsernamePasswordAuthenticationToken, and this object is to Authentication object which then used for authorization<br>
 * 7) SecurityContextPersistenceFilter filter will check whether any authenticated object exist in session or not if yes it will load from there , if not then it performs authentication as above.  
 * 
 * @author jaydatt
 *
 */

@Configuration
@EnableWebSecurity
public class WebSecurityConfig extends WebSecurityConfigurerAdapter {

	@Autowired
	private UserDetailsService userDetailsService;
	
	@Autowired
	DataSource dataSource;

	@Bean
	public BCryptPasswordEncoder bCryptPasswordEncoder() {
		return new BCryptPasswordEncoder();
	}

	@Override
	protected void configure(HttpSecurity http) throws Exception {
		http.authorizeRequests()
			.antMatchers("/registration","/register").permitAll()
			.antMatchers("/", "/userData", "/welcome").hasAnyRole("USER", "ADMIN")
			.antMatchers("/adminData").hasRole("ADMIN").anyRequest().denyAll()
			.and()
				.formLogin().loginPage("/login")
			.and()
				.rememberMe()
				.tokenValiditySeconds(24 * 60 * 60)
				.tokenRepository(persistentTokenRepository())
			.and()
				.logout().logoutRequestMatcher(new AntPathRequestMatcher("/logout")).logoutSuccessUrl("/login")
					.permitAll()
			.and()
				.logout().permitAll();
//			.and()
//				.httpBasic()
//		         .authenticationEntryPoint(basicAuthEntryPoint());
		
		 
	}
	
//	@Bean
//	BasicAuthenticationEntryPoint basicAuthEntryPoint() {
//	  BasicAuthenticationEntryPoint bauth = new BasicAuthenticationEntryPoint();
//	  bauth.setRealmName("user");
//	  return bauth;
//	}
	
	@Bean
	public PersistentTokenRepository persistentTokenRepository() {
        JdbcTokenRepositoryImpl tokenRepository = new JdbcTokenRepositoryImpl();
        tokenRepository.setDataSource(dataSource);
        return tokenRepository;
    }

	@Autowired
    public void configureGlobal(AuthenticationManagerBuilder auth) throws Exception {
        auth.userDetailsService(userDetailsService).passwordEncoder(bCryptPasswordEncoder());
		
//		auth.inMemoryAuthentication()
//          .withUser("user").password("password")
//          .authorities("ROLE_USER");
    }
}